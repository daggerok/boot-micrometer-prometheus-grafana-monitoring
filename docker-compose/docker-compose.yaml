version: '2.1'
networks:
  backend-network:
  frontend-network:
services:
  postgres:
    image: library/postgres:11.7-alpine
    ports: ['5432:5432']
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: pg_isready -h 127.0.0.1 -p 5432 -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 3s
      retries: 33
      interval: 3s
    networks: [backend-network]
  backend:
    image: daggerok/boot-micrometer-prometheus-grafana-monitoring-backend:latest
    ports: ['8080:8080']
    environment:
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SPRING_PROFILES_INCLUDE: ci
    depends_on:
      postgres:
        condition: service_healthy
    networks: [backend-network]
  frontend:
    image: daggerok/boot-micrometer-prometheus-grafana-monitoring-frontend:latest
    ports: ['8080:8080']
    environment:
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SPRING_PROFILES_INCLUDE: ci
    depends_on:
      backend:
        condition: service_started
    networks:
    - backend-network
    - frontend-network
